---------------------------------- Part 1. 代码层级 ----------------------------------
static
	- css
		-- relation.css
		关系标注界面的样式
	- js
		-- relation.js 
		定义关系标注系统接口
		-- springy.js
		画布绘制系统基础框架
		-- springyui.js
		画布绘制系统接口
		relation.js 调用 springyui.js 调用 springy.js
templates
	- base.html
	关系标注页面框架
	- NerRelation.html
	关系标注示例页面
	
---------------------------------- Part 2. 接口说明 ----------------------------------
@1. relation.js
|************************|
|********全局变量********|
|************************|
	nodeSize        节点字体大小
	nodeFont        节点字体
	edgeFont        关系文字大小和字体
	blankHeight     行间高度
	colorDict       颜色定义
	entityType      节点类型
	relationShip    关系类型
	defaultDistance 关系默认高度

|************************|
|********接口定义********|
|************************|
P.S 加*为系统必要组件，必须调用
	1. 关系显示功能相关
		setEdgeStatus() 
		// 创建一个存储每种关系类型是否显示的bool型数组
		toggleEdge(relationType)
		// 开关关系是否显示，当关系显示时调用关闭显示，当关系不显示时打开显示
		// 再调用toggleEdge前，系统必须已经调用过 setEdgeStatus() 否则会出现错误
	
	2. 数据预处理
		createNodeList(nodeList, sent)
		// 根据文本内容，将 实体列表 扩展为创建用于画板绘制的节点列表
		// nodeList 是一个二维数组，第一维代表每个节点，第二维是节点
		// 节点的结构是 
		// [实体(string)， 实体类型(string)， 实体开始位置 int， 实体索引 int]
		// 实体类型要和 entityType 匹配 否则无法识别
		// sent 是 nodeList 中存储实体，所对应的文本
		
	3. 画布相关
		createCanvas(canvasArea, nodeList, relationDict, canvas_width)
		// 创建画板
		// canvasArea 是画板的父元素，即画板所位于的位置
		// nodeList 是要绘制到画板上的节点的列表， nodeList元素的结构 和createNodeList中定义的相同
		// relationList 是要绘制到画板上的关系的列表
		// 关系的结构是 {'source': node1, 关系的起源节点的ID
		//               'target': node2, 关系的目标节点的ID
		//               'data':{ 关系的属性
		//                  'relation': string 关系的类型
		//                  'distance'：int 关系向下的高度
		//                  'startPos': {x:int, y:int} 关系在起源节点上的坐标
		//                  'endPos'  : {x:int, y:int} 关系在目标节点上的坐标}}
		// canvas_width 画布的宽度
		
		setEdgeStatus()
		// 
		
	4. 关系修改查看表格相关
		createRelationTable(tableArea)
		// 创建关系表格
		// tableArea 是关系表格的父元素，即关系表格所位于的位置
	
		addTableLine(id, edge, nodeList))
		// 向关系表格中添加一行
	5. 
		
	createNodeList

		
		